// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PPL_sigmoid
double PPL_sigmoid(arma::vec btj, arma::uword j, const arma::mat& X, const arma::vec& Y, const arma::vec& S, const arma::vec& Z, const arma::mat& Kmat, double h1, double tau0, double tau1);
RcppExport SEXP _TrajecEstm_PPL_sigmoid(SEXP btjSEXP, SEXP jSEXP, SEXP XSEXP, SEXP YSEXP, SEXP SSEXP, SEXP ZSEXP, SEXP KmatSEXP, SEXP h1SEXP, SEXP tau0SEXP, SEXP tau1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type btj(btjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type tau1(tau1SEXP);
    rcpp_result_gen = Rcpp::wrap(PPL_sigmoid(btj, j, X, Y, S, Z, Kmat, h1, tau0, tau1));
    return rcpp_result_gen;
END_RCPP
}
// estimate_beta_theta_lbfgs_V1
arma::vec estimate_beta_theta_lbfgs_V1(arma::uword j, const arma::mat& X, const arma::vec& Y_S, const arma::vec& S, const arma::vec& Z, const arma::mat& Kmat, double tau0, double tau1, double sce, arma::vec init, double tol, std::size_t max_iter);
RcppExport SEXP _TrajecEstm_estimate_beta_theta_lbfgs_V1(SEXP jSEXP, SEXP XSEXP, SEXP Y_SSEXP, SEXP SSEXP, SEXP ZSEXP, SEXP KmatSEXP, SEXP tau0SEXP, SEXP tau1SEXP, SEXP sceSEXP, SEXP initSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_S(Y_SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< double >::type sce(sceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_beta_theta_lbfgs_V1(j, X, Y_S, S, Z, Kmat, tau0, tau1, sce, init, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// estimate_beta_theta_lbfgs_V2
arma::vec estimate_beta_theta_lbfgs_V2(arma::uword j, const arma::mat& X, const arma::vec& Y_S, const arma::vec& S, const arma::vec& Z, const arma::mat& Kmat, double tau0, double tau1, double sce, arma::vec init, double tol, std::size_t max_iter);
RcppExport SEXP _TrajecEstm_estimate_beta_theta_lbfgs_V2(SEXP jSEXP, SEXP XSEXP, SEXP Y_SSEXP, SEXP SSEXP, SEXP ZSEXP, SEXP KmatSEXP, SEXP tau0SEXP, SEXP tau1SEXP, SEXP sceSEXP, SEXP initSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_S(Y_SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< double >::type sce(sceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_beta_theta_lbfgs_V2(j, X, Y_S, S, Z, Kmat, tau0, tau1, sce, init, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// estimate_beta_NP
arma::vec estimate_beta_NP(arma::uword j, const arma::mat& X, const arma::vec& Y_S, const arma::vec& S, const arma::vec& Z, const arma::mat& Kmat, double d, double tau0, double tau1, arma::vec init, double tol, std::size_t max_iter);
RcppExport SEXP _TrajecEstm_estimate_beta_NP(SEXP jSEXP, SEXP XSEXP, SEXP Y_SSEXP, SEXP SSEXP, SEXP ZSEXP, SEXP KmatSEXP, SEXP dSEXP, SEXP tau0SEXP, SEXP tau1SEXP, SEXP initSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_S(Y_SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_beta_NP(j, X, Y_S, S, Z, Kmat, d, tau0, tau1, init, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// mu_r
double mu_r(arma::uword j, double t, double s, double h, const arma::vec& btj, const arma::mat& X, const arma::vec& Y, const arma::uvec& delPi, const arma::vec& S, const arma::vec& Z, double sce);
RcppExport SEXP _TrajecEstm_mu_r(SEXP jSEXP, SEXP tSEXP, SEXP sSEXP, SEXP hSEXP, SEXP btjSEXP, SEXP XSEXP, SEXP YSEXP, SEXP delPiSEXP, SEXP SSEXP, SEXP ZSEXP, SEXP sceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type btj(btjSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delPi(delPiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type sce(sceSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_r(j, t, s, h, btj, X, Y, delPi, S, Z, sce));
    return rcpp_result_gen;
END_RCPP
}
// mu_NP
double mu_NP(arma::uword j, double t, double s, double h1, double h2, const arma::vec& bj, const arma::mat& X, const arma::vec& Y, const arma::uvec& delPi, const arma::vec& S, const arma::vec& Z);
RcppExport SEXP _TrajecEstm_mu_NP(SEXP jSEXP, SEXP tSEXP, SEXP sSEXP, SEXP h1SEXP, SEXP h2SEXP, SEXP bjSEXP, SEXP XSEXP, SEXP YSEXP, SEXP delPiSEXP, SEXP SSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bj(bjSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delPi(delPiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_NP(j, t, s, h1, h2, bj, X, Y, delPi, S, Z));
    return rcpp_result_gen;
END_RCPP
}
// matK_tri4
arma::mat matK_tri4(const arma::vec& Z, double h);
RcppExport SEXP _TrajecEstm_matK_tri4(SEXP ZSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(matK_tri4(Z, h));
    return rcpp_result_gen;
END_RCPP
}
// matK_tri4_loop
arma::mat matK_tri4_loop(const arma::vec& Z, const arma::vec& S, double h);
RcppExport SEXP _TrajecEstm_matK_tri4_loop(SEXP ZSEXP, SEXP SSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(matK_tri4_loop(Z, S, h));
    return rcpp_result_gen;
END_RCPP
}
// matK
arma::mat matK(const arma::vec& Z, double h1);
RcppExport SEXP _TrajecEstm_matK(SEXP ZSEXP, SEXP h1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    rcpp_result_gen = Rcpp::wrap(matK(Z, h1));
    return rcpp_result_gen;
END_RCPP
}
// matK_sparse
arma::sp_mat matK_sparse(const arma::vec& Z, double h1);
RcppExport SEXP _TrajecEstm_matK_sparse(SEXP ZSEXP, SEXP h1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    rcpp_result_gen = Rcpp::wrap(matK_sparse(Z, h1));
    return rcpp_result_gen;
END_RCPP
}
// matK_dispatch
arma::mat matK_dispatch(const arma::vec& Z, double h1, Rcpp::LogicalVector use_sparse);
RcppExport SEXP _TrajecEstm_matK_dispatch(SEXP ZSEXP, SEXP h1SEXP, SEXP use_sparseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type use_sparse(use_sparseSEXP);
    rcpp_result_gen = Rcpp::wrap(matK_dispatch(Z, h1, use_sparse));
    return rcpp_result_gen;
END_RCPP
}
// compute_r_scalar
double compute_r_scalar(double s, double t, arma::vec theta, double sce);
RcppExport SEXP _TrajecEstm_compute_r_scalar(SEXP sSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP sceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sce(sceSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_r_scalar(s, t, theta, sce));
    return rcpp_result_gen;
END_RCPP
}
// compute_r_vec
arma::vec compute_r_vec(arma::vec s, arma::vec t, arma::vec theta, double sce);
RcppExport SEXP _TrajecEstm_compute_r_vec(SEXP sSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP sceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sce(sceSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_r_vec(s, t, theta, sce));
    return rcpp_result_gen;
END_RCPP
}
// compute_r_dr
Rcpp::List compute_r_dr(arma::vec s, arma::vec t, arma::vec theta, double sce);
RcppExport SEXP _TrajecEstm_compute_r_dr(SEXP sSEXP, SEXP tSEXP, SEXP thetaSEXP, SEXP sceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sce(sceSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_r_dr(s, t, theta, sce));
    return rcpp_result_gen;
END_RCPP
}
// gradi
arma::vec gradi(arma::vec btj, arma::uword j, const arma::mat& X, const arma::vec& Y_A, const arma::vec& A, const arma::vec& Z, const arma::mat& Kmat, double h1, double tau0, double tau1);
RcppExport SEXP _TrajecEstm_gradi(SEXP btjSEXP, SEXP jSEXP, SEXP XSEXP, SEXP Y_ASEXP, SEXP ASEXP, SEXP ZSEXP, SEXP KmatSEXP, SEXP h1SEXP, SEXP tau0SEXP, SEXP tau1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type btj(btjSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_A(Y_ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< double >::type tau1(tau1SEXP);
    rcpp_result_gen = Rcpp::wrap(gradi(btj, j, X, Y_A, A, Z, Kmat, h1, tau0, tau1));
    return rcpp_result_gen;
END_RCPP
}
// rfun
arma::vec rfun(arma::vec a, arma::vec t, arma::vec theta);
RcppExport SEXP _TrajecEstm_rfun(SEXP aSEXP, SEXP tSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rfun(a, t, theta));
    return rcpp_result_gen;
END_RCPP
}
// rfun2
double rfun2(double a, double t, arma::vec theta);
RcppExport SEXP _TrajecEstm_rfun2(SEXP aSEXP, SEXP tSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(rfun2(a, t, theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TrajecEstm_PPL_sigmoid", (DL_FUNC) &_TrajecEstm_PPL_sigmoid, 10},
    {"_TrajecEstm_estimate_beta_theta_lbfgs_V1", (DL_FUNC) &_TrajecEstm_estimate_beta_theta_lbfgs_V1, 12},
    {"_TrajecEstm_estimate_beta_theta_lbfgs_V2", (DL_FUNC) &_TrajecEstm_estimate_beta_theta_lbfgs_V2, 12},
    {"_TrajecEstm_estimate_beta_NP", (DL_FUNC) &_TrajecEstm_estimate_beta_NP, 12},
    {"_TrajecEstm_mu_r", (DL_FUNC) &_TrajecEstm_mu_r, 11},
    {"_TrajecEstm_mu_NP", (DL_FUNC) &_TrajecEstm_mu_NP, 11},
    {"_TrajecEstm_matK_tri4", (DL_FUNC) &_TrajecEstm_matK_tri4, 2},
    {"_TrajecEstm_matK_tri4_loop", (DL_FUNC) &_TrajecEstm_matK_tri4_loop, 3},
    {"_TrajecEstm_matK", (DL_FUNC) &_TrajecEstm_matK, 2},
    {"_TrajecEstm_matK_sparse", (DL_FUNC) &_TrajecEstm_matK_sparse, 2},
    {"_TrajecEstm_matK_dispatch", (DL_FUNC) &_TrajecEstm_matK_dispatch, 3},
    {"_TrajecEstm_compute_r_scalar", (DL_FUNC) &_TrajecEstm_compute_r_scalar, 4},
    {"_TrajecEstm_compute_r_vec", (DL_FUNC) &_TrajecEstm_compute_r_vec, 4},
    {"_TrajecEstm_compute_r_dr", (DL_FUNC) &_TrajecEstm_compute_r_dr, 4},
    {"_TrajecEstm_gradi", (DL_FUNC) &_TrajecEstm_gradi, 10},
    {"_TrajecEstm_rfun", (DL_FUNC) &_TrajecEstm_rfun, 3},
    {"_TrajecEstm_rfun2", (DL_FUNC) &_TrajecEstm_rfun2, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_TrajecEstm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
